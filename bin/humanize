#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Converts byte sizes to a human-friendly quantity
"""

from __future__ import print_function
import sys


def naturalsize(value, binary=False, gnu=False, format='%.1f'):
    # stolen from:
    # https://github.com/jmoiron/humanize/blob/master/humanize/filesize.py
    """Format a number of byteslike a human readable filesize (eg. 10 kB).  By
    default, decimal suffixes (kB, MB) are used.  Passing binary=true will use
    binary suffixes (KiB, MiB) are used and the base will be 2**10 instead of
    10**3.  If ``gnu`` is True, the binary argument is ignored and GNU-style
    (ls -sh style) prefixes are used (K, M) with the 2**10 definition.
    Non-gnu modes are compatible with jinja2's ``filesizeformat`` filter."""

    suffixes = {
        'decimal': ('kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'),
        'binary': ('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'),
        'gnu': "KMGTPEZY",
    }

    if gnu:
        suffix = suffixes['gnu']
    elif binary:
        suffix = suffixes['binary']
    else:
        suffix = suffixes['decimal']

    base = 1024 if (gnu or binary) else 1000
    bytes = float(value)

    if bytes == 1 and not gnu:
        return '1 Byte'
    elif bytes < base and not gnu:
        return '%d Bytes' % bytes
    elif bytes < base and gnu:
        return '%dB' % bytes

    for i, s in enumerate(suffix):
        unit = base ** (i+2)
        if bytes < unit and not gnu:
            return (format + ' %s') % ((base * bytes / unit), s)
        elif bytes < unit and gnu:
            return (format + '%s') % ((base * bytes / unit), s)
    if gnu:
        return (format + '%s') % ((base * bytes / unit), s)
    return (format + ' %s') % ((base * bytes / unit), s)


def get_numbers(args):
    if args.number:
        yield args.number
    else:
        line = sys.stdin.readline()
        while line:
            yield line.strip()
            line = sys.stdin.readline()


def run(args):
    for number in get_numbers(args):
        try:
            float(number)
            print(naturalsize(number, binary=args.binary, gnu=args.gnu))
        except ValueError:
            print('Not a number: %r' % number)


if '__main__' == __name__:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('number', nargs='?',
                        help="""Number to be formatted.
                        If not given, will read numbers from stdin""")

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--binary', action='store_true',
                       help="""Use binary suffixes and base 2**10
                       instead of the decimal default""")
    group.add_argument('--gnu', action='store_true',
                       help='Use GNU style suffixes and binary base')

    args = parser.parse_args()
    run(args)
