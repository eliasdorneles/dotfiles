snippet #!
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
snippet imp
	import ${0:module}
snippet from
	from ${1:package} import ${0:module}

snippet wh
	while ${1:condition}:
		${0}
snippet with
	with ${1:expr} as ${2:var}:
		${0}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${0}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${0:del self._$1}
		return locals()
	$1 = property(**$1())
# Ifs
snippet if
	if ${1:condition}:
		${0}
snippet el
	else:
		${0}
snippet ei
	elif ${1:condition}:
		${0}
# For
snippet for
	for ${1:item} in ${2:items}:
		${0}
# Encodes
snippet cutf8
	# -*- coding: utf-8 -*-
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${0:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${0:raise $3}
snippet try Try/Except/Else
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${0}
snippet try Try/Except/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${0}
snippet try Try/Except/Else/Finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${0:main()}
# __magic__
snippet _
	__${1:init}__
# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
snippet iembed
	from IPython import embed as iembed; iembed()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
# python console debugger (pudb)
snippet pudb
	import pudb; pudb.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})
snippet rinspect
	from scrapy.shell import inspect_response; inspect_response(response, self)
snippet "
	"""
	${0:doc}
	"""
# assertions
snippet a=
	self.assertEqual(${0}, ${1})
# test function/method
snippet test
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${0}
# test case
snippet testcase
	class ${1:ExampleCase}(unittest.TestCase):

		def test_${2:description}(self):
			${0}
snippet fut
	from __future__ import ${0}
snippet script
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	"""Script description here
	"""

	from __future__ import print_function
	
	
	def run(args):
		pass
	
	
	if '__main__' == __name__:
		import argparse
		parser = argparse.ArgumentParser(description=__doc__)

		args = parser.parse_args()
		run(args)
snippet args
	import argparse
	parser = argparse.ArgumentParser(description="Script")

	args = parser.parse_args()
snippet twiscript
	from __future__ import print_function
	from twisted.internet import reactor, task


	def main(args):
		${0:pass}


	def on_script_success(_):
		print('Done')
		reactor.stop()


	def on_script_failure(result):
		print('ERROR calling script: %s' % result)
		print('Exiting...')
		reactor.stop()


	if '__main__' == __name__:
		import argparse
		parser = argparse.ArgumentParser(description=__doc__)

		args = parser.parse_args()

		d = task.deferLater(reactor, 0, main, args)
		d.addCallbacks(on_script_success, on_script_failure)
		reactor.run()
snippet flask
	"""
	A Flask app -- please describe me here
	Run with: flask run
	"""

	from flask import Flask
	app = Flask(__name__)


	@app.route('/')
	def index():
	    return 'Index Page'


	@app.route('/hello/<user>')
	def hello(user='World'):
		return 'Hello, {}'.format(user)
