[user]
    name = Elias Dorneles
    email = elias.dorneles@hey.com
[merge]
    tool = diffconflicts
    conflictstyle = zdiff3
[mergetool]
    keepBackup = false
[mergetool "diffconflicts"]
    cmd = vim -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
    trustExitCode = true
[branch]
        sort = -committerdate
[alias]
    root = rev-parse --show-toplevel
    current = rev-parse --abbrev-ref HEAD  # current branch
    last = rev-parse --short HEAD  # last commit

    co = checkout
    cob = checkout -b
    commit = commit --signoff # sadly, this doesn't work =/
    ci = commit --signoff
    d = diff
    dc = diff --cached
    wd = diff --word-diff
    wdiff = diff --word-diff
    s = status -sb
    st = status -sb
    aa = add --all
    amend = commit --amend
    fixup = commit --amend --no-edit --no-verify

    stash-new = stash --keep-index
    stash-all = stash --include-untracked
    stashall = stash --include-untracked

    # undo last commit, keeping changes in filesystem
    undo-commit = reset HEAD~1 --mixed
    undo = reset HEAD~1 --mixed

    undo-add = reset --keep
    rk = reset --keep

    # logs, enhanced
    ls = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    logtree = log --graph --oneline --decorate --all
    wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads

    # log for specific file
    filelog = log -u
    fl = log -u

    please = push --force-with-lease

	alias = !sh -c 'git config --global "alias.$1" "$2"' --

    hub = "!f() { git clone git@github.com:$1; }; f"
    lab = "!f() { git clone git@gitlab.com:$1; }; f"

    # list files with conflicts
    ls-conflicts = diff --name-only --diff-filter=U --relative .
    lc = ls-conflicts

    # list files modified in previous commit
    ls-recently-committed = "!f(){\
            git show --name-only --oneline $1 --relative . | egrep -v \"^[a-z0-9]+ \"; \
        }; f "
    lr = ls-recently-committed

    # list files added/modified but not yet committed
    ls-modified = "!f(){\
            (git ls-files --modified --others --exclude-standard $(git rev-parse --show-toplevel); \
            git diff --cached --name-only --relative .) | sort | uniq; \
        }; f "
    lm = ls-modified

    ls-new = "!f(){\
            git ls-files --others --exclude-standard $(git rev-parse --show-toplevel); \
        }; f "
    ln = ls-new

    recent-branches = "!f(){\
            git branch --sort=-committerdate | head $@; \
        }; f "
    lb = recent-branches

    publish = "!f(){\
        set -e; \
        branch_name=$(git rev-parse --abbrev-ref HEAD); \
        git push -u origin $branch_name; \
        }; f "

    # sync current branch
    sync = "!f(){\
        set -e; \
        git stash --include-untracked; \
        git pull --rebase; \
        git push; \
        git stash pop; \
        }; f "

    # switch to another branch, stashing in between
    switch = "!f(){\
        set -e; \
        [ -z \"$1\" ] && { echo Usage: git switch BRANCH_NAME; exit 1; }; \
        branch=\"$1\"; \
        [ \"$branch\" = '-' ] || git rev-parse --verify --quiet $branch >/dev/null || { echo \"Branch $branch doesn't exist\"; exit 1; }; \
        echo \"Switching to branch $branch\"; \
        git stash --include-untracked; \
        git checkout $branch; \
        [ \"$branch\" = '-' ] && branch=$(git rev-parse --abbrev-ref HEAD); \
        stash=$(git stash list | grep \"WIP on ${branch}:\" | grep -oE '^stash[^:]+' | head -n1); \
        [ -n \"$stash\" ] && git stash pop $stash; \
        }; f "
    sw = "!f(){ git switch \"$@\"; }; f"  # direct aliases don't work for complex aliases

    # github helpers:
    fetch-pr = "!f(){\
        [ -z \"$1\" ] && { echo Usage: git fetch-pr PULL_REQUEST_ID [REMOTE_NAME] [NEW_BRANCH_NAME]; exit 1; }; \
        remote=${2:-origin}; \
        branch=${3:-pr-$1}; \
        git fetch $remote \"pull/$1/head:$branch\"; \
        }; f "
    pr = "!f(){\
        branch=${3:-pr-$1}; \
        git fetch-pr \"$@\"; \
        git switch $branch; \
        }; f "

    # gitlab helpers:
    fetch-mr = "!f(){\
        [ -z \"$1\" ] && { echo Usage: git fetch-pr PULL_REQUEST_ID [REMOTE_NAME] [NEW_BRANCH_NAME]; exit 1; }; \
        remote=${2:-origin}; \
        branch=${3:-mr-$1}; \
        git fetch $remote merge-requests/$1/head:$branch; \
        }; f "
    mr = "!f(){\
        branch=${3:-mr-$1}; \
        git fetch-mr \"$@\"; \
        git switch $branch; \
        }; f "

    meld = difftool -t meld --dir-diff
    clean-branches = "!f(){\
        main_branch=master; \
        current_branch=$(git rev-parse --abbrev-ref HEAD); \
        [ \"$current_branch\" = \"main\" ] && { main_branch=\"main\"; }; \
        [ \"x$1\" = \"x--main\" ] && { main_branch=\"$2\"; shift; shift; }; \
        echo \"Using main_branch=$main_branch\" ; \
        git branch --merged \"$main_branch\" | grep -v \"$main_branch\" | xargs --no-run-if-empty -n1\
        git branch -d; \
        }; f "

[core]
	editor = vim -p
	autocrlf = input
	excludesfile = /home/elias/.gitignore_global
[push]
	default = simple
	autoSetupRemote = true
[github]
	user = eliasdorneles
[web]
	browser = xdg-open
[rerere]
	enabled = true
	autoupdate = true
[diff]
	compactionHeuristic = true
	algorithm = histogram
	colorMoved = plain
	mnemonicPrefix = true
	renames = true
#[pager]
#	log = diff-highlight | less
#	show = diff-highlight | less
#	diff = diff-highlight | less

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    untracked = cyan
[init]
	defaultBranch = main
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[column]
	ui = auto
[fetch]
	prune = true
	pruneTags = true
	all = true
[help]
	autocorrect = prompt
[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true
[pull]
	rebase = true
